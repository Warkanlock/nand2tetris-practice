// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:

 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to Memory, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution

        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS: 
    // get type of instruction (A or C)
    Not(in=instruction[15], out=typeAInstruction);
    Not(in=typeAInstruction, out=typeCInstruction);

    // C-instruction to A register
    And(a=typeCInstruction, b=instruction[5], out=loadARegister);
    And(a=typeCInstruction, b=instruction[4], out=loadDRegister);

    Mux16(a=instruction, b=aluOutput, sel=loadARegister, out=Ainput);
    
    // A register
    Or(a=typeAInstruction, b=loadARegister, out=loadA); // loadA = typeAInstruction || loadARegister
    ARegister(in=Ainput, load=loadA, out=aRegisterOutput);

    // D register
    Mux16(a=aRegisterOutput, b=inM, sel=instruction[12], out=outputForALU); // outputForALU = aluOutput || inM
    DRegister(in=aluOutput, load=loadDRegister, out=dRegisterOutput);

    // logic
    ALU(x=dRegisterOutput, y=outputForALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOutput, zr=operationIsZero, ng=operationIsNegative);

    // writting to memory
    Or16(a=false, b=aRegisterOutput, out[0..14]=addressM);
    Or16(a=false, b=aluOutput, out=outM);
    And(a=instruction[15], b=instruction[3], out=writeM);

    // check if it's a jump instruction
    And(a=operationIsZero, b=instruction[1], out=jeq);
    And(a=operationIsNegative, b=instruction[2], out=jlt);
    Or(a=operationIsZero, b=operationIsNegative, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);
    And(a=positive, b=instruction[0], out=jgt);
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jumpToA); 
    And(a=instruction[15], b=jumpToA, out=loadProgramCounter);
    Not(in=loadProgramCounter, out=incrementProgramCounter);

    // program counter
    PC(in=aRegisterOutput, inc=incrementProgramCounter, load=loadProgramCounter, reset=reset, out[0..14]=pc);
}