// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:

 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to Memory, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution

        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS: 

    /*
        since instruction could be A-instruction or C-instruction, we need to check
        1. if it's an A-instruction or C-instruction
        2. if it's an A-instruction, we need to load the A-register with the value
        3. if it's a C-instruction, we need to load the A-register with the value of the memory

        structure of the instruction
        [1|0]xxa cccc ccdd djjj

        bit 15: 0 for A-instruction, 1 for C-instruction
        bit 14: not used
        bit 13: not used
        bit 12: a-bit when C-instruction, 1 from memory, 0 from A-register
        bit 11: zx-bit, if 1, x is set to 0
        bit 10: nx-bit, if 1, x is set to !x
        bit 9: zy-bit, if 1, y is set to 0
        bit 8: ny-bit, if 1, y is set to !y
        bit 7: f-bit, if 1, out is set to x + y, else x & y
        bit 6: no-bit, if 1, out is set to !out
        bit 5: a-bit, if 1, store in A-register
        bit 4: d-bit, if 1, store in D-register
        bit 3: write-bit, if 1, write to memory
        bit 2: jgt-bit, if 1, jump if x > 0
        bit 1: jeq-bit, if 1, jump if x == 0
        bit 0: jlt-bit, if 1, jump if x < 0
    */

    // we check if it's an A-instruction or C-instruction
    Not(in=instruction[15], out=isAddressInstruction); // since if it's an A-instruction, the first bit is 0

    // define from where we should load the A-register
    Or(a=isAddressInstruction, b=instruction[5], out=loadARegister);
    Mux16(a=aluOutput, b=instruction, sel=isAddressInstruction, out=instructionOutput);
    ARegister(in=instructionOutput, load=loadARegister, out=aRegisterOutput, out[0..14]=addressM);

    // we choose here to load the A-register with the value of the memory
    // or the value of the A-register depending on the instruction (A-instruction or C-instruction)
    And(a=instruction[15], b=instruction[12], out=switchMemoryOrRegister);
    Mux16(a=aRegisterOutput, b=inM, sel=switchMemoryOrRegister, out=outputForALU);

    // get from instruction if we should store in D-register
    And(a=instruction[15], b=instruction[4], out=shouldStoreInDRegister);
    DRegister(in=aluOutput, load=shouldStoreInDRegister, out=dRegisterOutput);

    // logic for the ALU using cccccc operation bits
    ALU(
        x=dRegisterOutput, 
        y=outputForALU, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        zr=operationIsZero, ng=operationIsNegative, // to check if the operation is zero or negative
        out=aluOutput,
        out=outM
    );

    // load in memory if it's a C-instruction and it's a write operation
    And(a=instruction[15], b=instruction[3], out=writeM);

    // type of jump
    And(a=instruction[15], b=instruction[0], out=jgt);
    And(a=instruction[15], b=instruction[1], out=jeq);
    And(a=instruction[15], b=instruction[2], out=jlt);
    Not(in=operationIsZero, out=operationIsNotZero);
    Not(in=operationIsNegative, out=operationIsPositive);
    And(a=operationIsNotZero, b=operationIsPositive, out=positiveNumber);
    And(a=positiveNumber, b=jgt, out=jumpA);
    And(a=operationIsZero, b=jeq, out=jumpB);
    And(a=operationIsNegative, b=jlt, out=jumpC);
    Or(a=jumpA, b=jumpB, out=jump1);
    Or(a=jump1, b=jumpC, out=jumpOrLoad);

    // program counter
    PC(
        in=aRegisterOutput, 
        load=jumpOrLoad,
        inc=true,
        reset=reset, 
        out[0..14]=pc
    );
}