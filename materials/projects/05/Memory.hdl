// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    /**
    > We are using 13..14 bits of address to select between RAM16K, Screen, Keyboard

    This is because:
    - RAM16K has 14 bits of address
    - Screen has 13 bits of address
    - Keyboard has 1 bit of address

    Addresses (in binary) [start..end] are:
    - 0x0000 - 0x3FFF -> RAM16K = 0*00*0 0000 0000 0000 - 0*01*1 1111 1111 1111
    - 0x4000 - 0x5FFF -> Screen = 0*10*0 0000 0000 0000 - 0*10*1 1111 1111 1111
    - 0x6000 - 0x7FFF -> Keyboard = 0*11*0 0000 0000 0000 - 0*11*1 1111 1111 1111

    (*..*) = bits used to select between RAM16K, Screen, Keyboard
    **/
    DMux4Way(in=load, sel=address[13..14], a=loadA, b=loadB, c=loadC, d=null);
    Or(a=loadA, b=loadB, out=loadAB);
    RAM16K(in=in, load=loadAB, address=address[0..13], out=ram16kOut);
    Screen(in=in, load=loadC, address=address[0..12], out=screenOut);
    Keyboard(out=keyboardOut);
    Mux4Way16(a=ram16kOut, b=ram16kOut, c=screenOut, d=keyboardOut, sel=address[13..14], out=out);
}
